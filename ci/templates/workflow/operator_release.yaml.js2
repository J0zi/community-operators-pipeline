name: Operator release {% if puct_custom_var == 'manual_release' %}manual{% endif %}

on:
{% if puct_custom_var != 'manual_release' %}
  push:
    branches:
      - master
      - main
{% endif %}
{% raw %}
  workflow_dispatch:
    inputs:
      release:
        description: 'Force to run release'
        required: true
        default: '0'   
      delete:
        description: 'Remove operator virtually from git (cockroachdb or cockroachdb/5.0.4) for debuging only'
        required: false
        default: ''
{% endraw %}
{% if puct_custom_var == 'manual_release' %}
{% raw %}
      delete_for_renew:
        description: 'Remove operator from index (allow/operator-recreate)'
        required: true
        default: '0'

{% endraw %}
{% raw %}
      list_of_operators:
        description: 'List of operators to be synced in the index, list has to be devided by spaces (e.g. aqua ripsaw)'
        required: true
        default: ''
{% endraw %}
{% endif %}

env:
  OPP_DEBUG: 1
  OPP_CONTAINER_OPT: "-t"
  OPP_SCRIPT_URL: "{{ default_config.pipeline.ci_scripts_dir }}/opp.sh"
  OPP_SCRIPT_ENV_URL: "{{ default_config.pipeline.ci_scripts_dir }}/opp-env.sh"
  OPP_SCRIPT_ISS_URL: "{{ default_config.pipeline.ci_scripts_dir }}/opp-iss.sh"
  OPP_SCRIPT_CLEANUP_URL: "{{ default_config.pipeline.ci_scripts_dir }}/opp-disk-cleanup-on-startup.sh"
  OPP_SCRIPT_TRIGGER_OHIO_URL: "{{ default_config.pipeline.ci_scripts_dir }}/opp-trigger-operatorhubio-ci.sh"
  OPP_IMAGE: "{{ default_config.pipeline.image }}"
  OPP_ANSIBLE_PULL_REPO: "{{ default_config.pipeline.playbooks.repo }}"
  OPP_ANSIBLE_PULL_BRANCH: "{{ default_config.pipeline.playbooks.branch }}"
  OPP_PROD: 1
  OPP_MIRROR_LATEST_TAG: "{{ default_config.production.index.latest }}"
  OPP_PRODUCTION_TYPE: "{{ default_config.production.type }}"
  OPP_RELEASE_BUNDLE_REGISTRY: "{{ default_config.production.bundle.registry }}"
  OPP_RELEASE_BUNDLE_ORGANIZATION: "{{ default_config.production.bundle.organization }}"
  OPP_RELEASE_INDEX_REGISTRY: "{{ default_config.production.index.registry }}"
  OPP_RELEASE_INDEX_ORGANIZATION: "{{ default_config.production.index.organization }}"
  OPP_RELEASE_INDEX_NAME: "{{ default_config.production.index.name }}"
  OPP_MIRROR_INDEX_REGISTRY: "{{ default_config.production.mirror.registry }}"
  OPP_MIRROR_INDEX_ORGANIZATION: "{{ default_config.production.mirror.organization }}"
  OPP_MIRROR_INDEX_NAME: "{{ default_config.production.mirror.name }}"
  OPP_MIRROR_INDEX_ENABLED: "{{ default_config.production.mirror.enabled }}"
  OPP_MIRROR_INDEX_MULTIARCH_BASE: "{{ default_config.production.mirror.multiarch.base }}"
  OPP_MULTIARCH_SUPPORTED_VERSIONS: "{% for item in default_config.production.mirror.multiarch.base_tags %}{{ item }}{%- if not loop.last %} {% endif %}{% endfor %}"
  OPP_MIRROR_INDEX_MULTIARCH_POSTFIX: "{{ default_config.production.mirror.multiarch.postfix }}"
  IIB_INPUT_REGISTRY_USER: "{{ default_config.production.mirror.username.in }}"
  OPP_REGISTRY_MIRROR_USER: "{{ default_config.production.mirror.username.out }}"
  OPP_THIS_REPO_BASE: "{{ default_config.pipeline.base }}"
  OPP_THIS_REPO: "{{ default_config.pipeline.repo }}"
  OPP_THIS_BRANCH: "{{ default_config.pipeline.branch }}"
  OPP_REVIEWERS_ENABLED: 0

{% raw %}
  OPP_ALLOW_FORCE_RELEASE: ${{ github.event.inputs.release }}
  OPP_REMOVE_OPERATOR_AFTER_CLONE_PATH: "${{ github.event.inputs.delete }}"
  REGISTRY_RELEASE_API_TOKEN: ${{ secrets.REGISTRY_RELEASE_API_TOKEN }}
  REGISTRY_MIRROR_PW: ${{ secrets.REGISTRY_MIRROR_PW }}
  GODEBUG: x509ignoreCN=0
  CI_OHIO_TRIGGER_TOKEN: ${{ secrets.CI_OHIO_TRIGGER_TOKEN }}
  OHIO_REGISTRY_TOKEN: ${{ secrets.OHIO_REGISTRY_TOKEN }}
  QUAY_APPREG_TOKEN: ${{ secrets.QUAY_APPREG_TOKEN }}
  QUAY_COURIER_TOKEN: ${{ secrets.QUAY_COURIER_TOKEN }}
  REPO_GHA_PAT: ${{ secrets.REPO_GHA_PAT }}

jobs:
{% endraw %}
  release-{{ default_config.production.type }}:
    name: "Index / {{ default_config.production.type }}"
{% raw %}
    runs-on: ubuntu-latest
    strategy:
      matrix:
{% endraw %}
{% if puct_custom_var != 'manual_release' %}
        index-tag: {{ default_config.production.index.tags }}
{% endif %}
{% if puct_custom_var == 'manual_release' %}
{% raw %}
        index-tag: ['${{ github.event.inputs.index }}']
{% endraw %}
{% endif %}
{% raw %}
      fail-fast: false
    steps:
{% endraw %}
{% if default_config.production.index.signature == 1 %}
{% raw %}
      - name: Prepare variables for the sign process
        id: openshift-vars
        env:
          #OPERATOR_INDEX_TAG_RAW: ${{ matrix.index-tag }}
          OPERATOR_INDEX_TAG_RAW: "v4.7-db"
          #OPP_AUTO_PACKAGEMANIFEST_CLUSTER_VERSION_LABEL: "${{ needs.pr-check.outputs.opp_auto_packagemanifest_cluster_version_label }}"
        run: |
          docker login ${OPP_MIRROR_INDEX_REGISTRY} -u $OPP_REGISTRY_MIRROR_USER -p $REGISTRY_MIRROR_PW
          OPERATOR_INDEX_TAG=$(echo ${OPERATOR_INDEX_TAG_RAW} |cut -d'-' -f1)
          skopeo inspect docker://${OPP_MIRROR_INDEX_REGISTRY}/${OPP_MIRROR_INDEX_ORGANIZATION}/${OPP_MIRROR_INDEX_NAME}:${OPERATOR_INDEX_TAG} > /dev/null # error out if needed
          OPERATOR_INDEX_DIGEST=$(skopeo inspect docker://${OPP_MIRROR_INDEX_REGISTRY}/${OPP_MIRROR_INDEX_ORGANIZATION}/${OPP_MIRROR_INDEX_NAME}:${OPERATOR_INDEX_TAG} | jq -r ".Digest")
          OPERATOR_INDEX_RESOLVED="${OPP_MIRROR_INDEX_REGISTRY}/${OPP_MIRROR_INDEX_ORGANIZATION}/${OPP_MIRROR_INDEX_NAME}@${OPERATOR_INDEX_DIGEST}"
          #OPERATOR_INDEX="${OPP_MIRROR_INDEX_REGISTRY}/${OPP_MIRROR_INDEX_ORGANIZATION}/${OPP_MIRROR_INDEX_NAME}:${OPERATOR_INDEX_TAG}"
          OPERATOR_INDEX="registry.redhat.io/redhat/community-operator-index:${OPERATOR_INDEX_TAG}"
          echo $OPERATOR_INDEX_RESOLVED
          echo $OPERATOR_INDEX
          echo $OPERATOR_INDEX_DIGEST
          echo "::set-output name=operator_index_resolved::${OPERATOR_INDEX_RESOLVED}"
          echo "::set-output name=operator_index::${OPERATOR_INDEX}"
          echo "::set-output name=operator_index_digest::${OPERATOR_INDEX_DIGEST}"
      
      
      - name: Check payload
        run: |
          echo "{\"manifest_digest\": \"${{ steps.openshift-vars.outputs.operator_index_digest }}\", \"reference\": \"${{ steps.openshift-vars.outputs.operator_index }}\",\"requester\": \"${{ secrets.SIGNATURE_WEBHOOK_REQUESTER_EMAIL }}\"}"
          curl https://community-signing-pipeline-dev.apps.pipelines-stage.0ce8.p1.openshiftapps.com -d "{\"manifest_digest\": \"${{ steps.openshift-vars.outputs.operator_index_digest }}\", \"reference\": \"${{ steps.openshift-vars.outputs.operator_index }}\",\"requester\": \"${{ secrets.SIGNATURE_WEBHOOK_REQUESTER_EMAIL }}\"}" -u "community-op-cert:${{ secrets.SIGNATURE_WEBHOOK_PASSWD }}"
      
      
      
      # - name: Initialize sign process
      #   uses: operator-framework/community-operators@webhook
      #   continue-on-error: true
      #   env:
      #     INDEX_SHA: "${{ steps.openshift-vars.outputs.index_sha }}"
      #     webhook_type: 'json-extended'
      #     webhook_url: 'https://community-signing-pipeline-dev.apps.pipelines-stage.0ce8.p1.openshiftapps.com'
      #     webhook_secret: ${{ secrets.SIGNATURE_WEBHOOK_SECRET }}
      #     data: "{\"manifest_digest\": \"${{ steps.openshift-vars.outputs.operator_index_digest }}\", \"reference\": \"${{ steps.openshift-vars.outputs.operator_index }}\",\"requester\": \"${{ secrets.SIGNATURE_WEBHOOK_REQUESTER_EMAIL }}\"}"
      #     webhook_auth: "community-op-cert:${{ secrets.SIGNATURE_WEBHOOK_PASSWD }}"
{% endraw %}
{% endif %}

  